#!/bin/bash

# Script de restauration pour Cassandra via Docker
# Restaure la base √† partir des fichiers de dump

echo "üöÄ D√©but de la restauration Cassandra via Docker..."

# V√©rifier les arguments
if [ $# -eq 0 ]; then
    echo "‚ùå Usage: $0 <dossier_dump>"
    echo "   Exemple: $0 cassandra_dump_docker_20250829_174032"
    exit 1
fi

DUMP_DIR="$1"

if [ ! -d "$DUMP_DIR" ]; then
    echo "‚ùå Dossier de dump '$DUMP_DIR' non trouv√©!"
    exit 1
fi

echo "üìÅ Dossier de dump: $DUMP_DIR"

# V√©rifier que le conteneur est en cours d'ex√©cution
if ! docker ps | grep -q fact_checker_cassandra; then
    echo "‚ùå Conteneur fact_checker_cassandra non trouv√© ou arr√™t√©"
    echo "üîÑ D√©marrage du conteneur..."
    docker start fact_checker_cassandra
    echo "‚è≥ Attente du d√©marrage de Cassandra..."
    sleep 30
fi

# Attendre que Cassandra soit pr√™t
echo "‚è≥ V√©rification que Cassandra est pr√™t..."
MAX_ATTEMPTS=10
ATTEMPT=0

while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
    if docker exec fact_checker_cassandra cqlsh -e "SELECT release_version FROM system.local;" >/dev/null 2>&1; then
        echo "‚úÖ Cassandra est pr√™t!"
        break
    else
        ATTEMPT=$((ATTEMPT + 1))
        echo "‚è≥ Tentative $ATTEMPT/$MAX_ATTEMPTS - Cassandra n'est pas encore pr√™t..."
        sleep 10
    fi
done

if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
    echo "‚ùå Cassandra n'est pas pr√™t apr√®s $MAX_ATTEMPTS tentatives"
    exit 1
fi

# V√©rifier que les fichiers n√©cessaires existent
REQUIRED_FILES=("keyspace_structure.cql" "table_structure.cql" "data.csv")
for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "$DUMP_DIR/$file" ]; then
        echo "‚ùå Fichier requis manquant: $file"
        exit 1
    fi
done

echo "‚úÖ Tous les fichiers requis sont pr√©sents"

# Cr√©er le keyspace
echo "üèóÔ∏è Cr√©ation du keyspace..."
if docker exec fact_checker_cassandra cqlsh -e "CREATE KEYSPACE IF NOT EXISTS fact_checker_keyspace WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '1'} AND durable_writes = true;" 2>/dev/null; then
    echo "‚úÖ Keyspace fact_checker_keyspace cr√©√©/restaur√©"
else
    echo "‚ö†Ô∏è Erreur lors de la cr√©ation du keyspace (peut d√©j√† exister)"
fi

# Supprimer la table existante si elle existe
echo "üóëÔ∏è Suppression de la table existante..."
docker exec fact_checker_cassandra cqlsh -e "DROP TABLE IF EXISTS fact_checker_keyspace.fact_checker_docs;" >/dev/null 2>&1
echo "‚úÖ Table existante supprim√©e"

# Cr√©er la table
echo "üìä Cr√©ation de la table..."
if docker exec fact_checker_cassandra cqlsh -f /tmp/table_structure.cql; then
    echo "‚úÖ Table fact_checker_docs cr√©√©e"
else
    echo "‚ùå Erreur lors de la cr√©ation de la table"
    exit 1
fi

# Copier le fichier de structure dans le conteneur
echo "üìã Copie de la structure de la table..."
docker cp "$DUMP_DIR/table_structure.cql" fact_checker_cassandra:/tmp/table_structure.cql

# Cr√©er la table avec la structure exacte
echo "üìä Cr√©ation de la table avec la structure exacte..."
CREATE_TABLE_SQL="
CREATE TABLE fact_checker_keyspace.fact_checker_docs (
    partition_id text,
    row_id text,
    attributes_blob text,
    body_blob text,
    vector vector<float, 4096>,
    metadata_s map<text, text>,
    PRIMARY KEY (partition_id, row_id)
) WITH CLUSTERING ORDER BY (row_id ASC)
    AND additional_write_policy = '99p'
    AND allow_auto_snapshot = true
    AND bloom_filter_fp_chance = 0.01
    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}
    AND cdc = false
    AND comment = ''
    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}
    AND compression = {'chunk_length_in_kb': '16', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND memtable = 'default'
    AND crc_check_chance = 1.0
    AND default_time_to_live = 0
    AND extensions = {}
    AND gc_grace_seconds = 864000
    AND incremental_backups = true
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair = 'BLOCKING'
    AND speculative_retry = '99p';
"

if docker exec fact_checker_cassandra cqlsh -e "$CREATE_TABLE_SQL"; then
    echo "‚úÖ Table fact_checker_docs cr√©√©e avec succ√®s"
else
    echo "‚ùå Erreur lors de la cr√©ation de la table"
    exit 1
fi

# Cr√©er les index
echo "üîç Cr√©ation des index..."
CREATE_INDEXES_SQL="
CREATE CUSTOM INDEX eidx_metadata_s_fact_checker_docs ON fact_checker_keyspace.fact_checker_docs (entries(metadata_s)) USING 'org.apache.cassandra.index.sai.StorageAttachedIndex';
CREATE CUSTOM INDEX idx_vector_fact_checker_docs ON fact_checker_keyspace.fact_checker_docs (vector) USING 'org.apache.cassandra.index.sai.StorageAttachedIndex';
"

if docker exec fact_checker_cassandra cqlsh -e "$CREATE_INDEXES_SQL"; then
    echo "‚úÖ Index cr√©√©s avec succ√®s"
else
    echo "‚ö†Ô∏è Erreur lors de la cr√©ation des index (peuvent d√©j√† exister)"
fi

# Restaurer les donn√©es
echo "üì• Restauration des donn√©es..."
DATA_FILE="$DUMP_DIR/data.csv"
if [ -f "$DATA_FILE" ]; then
    # Compter les lignes de donn√©es
    TOTAL_LINES=$(wc -l < "$DATA_FILE")
    DATA_LINES=$((TOTAL_LINES - 1))  # Soustraire l'en-t√™te
    
    echo "üìä Restauration de $DATA_LINES lignes..."
    
    # Lire le fichier CSV et ins√©rer les donn√©es
    LINE_COUNT=0
    SKIP_FIRST=true
    
    while IFS=',' read -r partition_id row_id body_blob metadata_s; do
        if [ "$SKIP_FIRST" = true ]; then
            SKIP_FIRST=false
            continue
        fi
        
        # Nettoyer les valeurs
        partition_id=$(echo "$partition_id" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
        row_id=$(echo "$row_id" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
        body_blob=$(echo "$body_blob" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
        metadata_s=$(echo "$metadata_s" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
        
        # √âchapper les apostrophes dans body_blob
        body_blob=$(echo "$body_blob" | sed "s/'/''/g")
        
        # Ins√©rer la ligne
        INSERT_SQL="INSERT INTO fact_checker_keyspace.fact_checker_docs (partition_id, row_id, body_blob, metadata_s) VALUES ('$partition_id', '$row_id', '$body_blob', $metadata_s);"
        
        if docker exec fact_checker_cassandra cqlsh -e "$INSERT_SQL" >/dev/null 2>&1; then
            LINE_COUNT=$((LINE_COUNT + 1))
            if [ $((LINE_COUNT % 100)) -eq 0 ]; then
                echo "   ‚úÖ $LINE_COUNT lignes restaur√©es..."
            fi
        else
            echo "   ‚ö†Ô∏è Erreur lors de la restauration de la ligne $LINE_COUNT"
        fi
    done < "$DATA_FILE"
    
    echo "‚úÖ Restauration termin√©e: $LINE_COUNT lignes restaur√©es"
else
    echo "‚ùå Fichier de donn√©es non trouv√©: $DATA_FILE"
    exit 1
fi

# V√©rifier la restauration
echo "üîç V√©rification de la restauration..."
RESTORED_COUNT=$(docker exec fact_checker_cassandra cqlsh -e "SELECT COUNT(*) FROM fact_checker_keyspace.fact_checker_docs;" | grep -E '[0-9]+' | head -1 | tr -d ' ')
echo "üìä Nombre de lignes dans la base restaur√©e: $RESTORED_COUNT"

# Cr√©er un rapport de restauration
RESTORE_REPORT="$DUMP_DIR/restore_report.txt"
cat > "$RESTORE_REPORT" << EOF
Rapport de restauration Cassandra
==================================
Timestamp: $(date)
Dossier de dump: $DUMP_DIR
Keyspace: fact_checker_keyspace
Table: fact_checker_docs

R√©sum√©:
- Keyspace cr√©√©/restaur√©: ‚úÖ
- Table supprim√©e et recr√©√©e: ‚úÖ
- Index cr√©√©s: ‚úÖ
- Lignes restaur√©es: $LINE_COUNT
- Lignes dans la base: $RESTORED_COUNT

Fichiers utilis√©s:
- keyspace_structure.cql: Structure du keyspace
- table_structure.cql: Structure de la table
- data.csv: Donn√©es √† restaurer

EOF

echo "üìã Rapport de restauration cr√©√©: $RESTORE_REPORT"

echo ""
echo "üéâ Restauration termin√©e avec succ√®s!"
echo "üìä Total lignes restaur√©es: $LINE_COUNT"
echo "üìÅ Rapport: $RESTORE_REPORT"
