#!/usr/bin/env python3
"""
Syst√®me hybride CORRECT combinant le syst√®me actuel et Grover corrig√©
Permet de basculer entre les deux approches selon les besoins
"""

import os
import sys
import time
import logging
from typing import List, Tuple, Dict, Any, Optional
from enum import Enum

# Ajouter les chemins n√©cessaires
current_dir = os.path.dirname(os.path.abspath(__file__))
system_dir = os.path.join(os.path.dirname(current_dir), 'system')
sys.path.insert(0, system_dir)
sys.path.insert(0, current_dir)

from quantum_search import retrieve_top_k as classical_quantum_search
from grover_correct import correct_grover_retrieve_top_k
from performance_metrics import time_operation, time_operation_context

logger = logging.getLogger(__name__)

class SearchStrategy(Enum):
    """Strat√©gies de recherche disponibles"""
    CLASSICAL_QUANTUM = "classical_quantum"  # Syst√®me actuel
    GROVER_CORRECT = "grover_correct"        # Grover corrig√©
    HYBRID_ADAPTIVE = "hybrid_adaptive"      # Hybride adaptatif
    GROVER_HYBRID = "grover_hybrid"          # Grover + quantum overlap

class CorrectHybridQuantumSearch:
    """
    Syst√®me de recherche hybride CORRECT combinant diff√©rentes strat√©gies quantiques
    """
    
    def __init__(self, strategy: SearchStrategy = SearchStrategy.HYBRID_ADAPTIVE):
        """
        Initialiser le syst√®me hybride correct
        
        Args:
            strategy: Strat√©gie de recherche √† utiliser
        """
        self.strategy = strategy
        self.performance_history = {
            'classical_quantum': [],
            'grover_correct': [],
            'grover_hybrid': []
        }
        
    def adaptive_strategy_selection(self, query_length: int, database_size: int) -> SearchStrategy:
        """
        S√©lectionner automatiquement la meilleure strat√©gie selon le contexte
        
        Args:
            query_length: Longueur de la requ√™te
            database_size: Taille de la base de donn√©es
            
        Returns:
            Strat√©gie recommand√©e
        """
        # R√®gles d'adaptation bas√©es sur l'historique et le contexte
        if database_size < 1000:
            # Petite base : syst√®me classique plus efficace
            return SearchStrategy.CLASSICAL_QUANTUM
        elif database_size > 10000:
            # Grande base : Grover corrig√© plus avantageux
            return SearchStrategy.GROVER_CORRECT
        elif query_length > 100:
            # Requ√™te complexe : hybride pour plus de pr√©cision
            return SearchStrategy.GROVER_HYBRID
        else:
            # Cas par d√©faut : hybride adaptatif
            return SearchStrategy.HYBRID_ADAPTIVE
    
    @time_operation("correct_hybrid_search_execution")
    def search(self, query_text: str, db_folder: str, k: int = 5, 
              n_qubits: int = 8, cassandra_manager=None, 
              strategy: Optional[SearchStrategy] = None) -> List[Tuple[float, str, str]]:
        """
        Ex√©cuter la recherche selon la strat√©gie s√©lectionn√©e
        
        Args:
            query_text: Texte de la requ√™te
            db_folder: Dossier des circuits QASM
            k: Nombre de r√©sultats
            n_qubits: Nombre de qubits
            cassandra_manager: Gestionnaire Cassandra
            strategy: Strat√©gie √† utiliser (optionnel)
            
        Returns:
            Liste des r√©sultats (score, qasm_path, chunk_id)
        """
        # S√©lectionner la strat√©gie
        if strategy is None:
            if self.strategy == SearchStrategy.HYBRID_ADAPTIVE:
                # Estimer la taille de la base
                try:
                    collection_info = cassandra_manager.get_collection_info()
                    db_size = collection_info.get('document_count', 5000)
                except:
                    db_size = 5000
                
                strategy = self.adaptive_strategy_selection(len(query_text), db_size)
            else:
                strategy = self.strategy
        
        logger.info(f"üîç Strat√©gie s√©lectionn√©e: {strategy.value}")
        
        # Ex√©cuter selon la strat√©gie
        start_time = time.time()
        
        try:
            if strategy == SearchStrategy.CLASSICAL_QUANTUM:
                results = self._execute_classical_quantum(query_text, db_folder, k, n_qubits, cassandra_manager)
            elif strategy == SearchStrategy.GROVER_CORRECT:
                results = self._execute_grover_correct(query_text, db_folder, k, n_qubits, cassandra_manager)
            elif strategy == SearchStrategy.GROVER_HYBRID:
                results = self._execute_grover_hybrid(query_text, db_folder, k, n_qubits, cassandra_manager)
            else:
                results = self._execute_hybrid_adaptive(query_text, db_folder, k, n_qubits, cassandra_manager)
            
            duration = time.time() - start_time
            
            # Enregistrer les performances
            self.performance_history[strategy.value].append({
                'duration': duration,
                'results_count': len(results),
                'query_length': len(query_text)
            })
            
            logger.info(f"‚úÖ Recherche termin√©e en {duration:.2f}s avec {len(results)} r√©sultats")
            return results
            
        except Exception as e:
            logger.error(f"‚ùå Erreur dans la recherche {strategy.value}: {e}")
            # Fallback vers le syst√®me classique
            logger.info("üîÑ Fallback vers le syst√®me classique")
            return self._execute_classical_quantum(query_text, db_folder, k, n_qubits, cassandra_manager)
    
    def _execute_classical_quantum(self, query_text: str, db_folder: str, k: int, 
                                 n_qubits: int, cassandra_manager) -> List[Tuple[float, str, str]]:
        """Ex√©cuter le syst√®me classique quantique"""
        logger.info("üîÑ Ex√©cution syst√®me classique quantique")
        return classical_quantum_search(query_text, db_folder, k, n_qubits, cassandra_manager)
    
    def _execute_grover_correct(self, query_text: str, db_folder: str, k: int, 
                              n_qubits: int, cassandra_manager) -> List[Tuple[float, str, str]]:
        """Ex√©cuter Grover corrig√©"""
        logger.info("üöÄ Ex√©cution Grover CORRECT")
        return correct_grover_retrieve_top_k(query_text, db_folder, k, n_qubits, cassandra_manager)
    
    def _execute_grover_hybrid(self, query_text: str, db_folder: str, k: int, 
                             n_qubits: int, cassandra_manager) -> List[Tuple[float, str, str]]:
        """Ex√©cuter Grover + quantum overlap"""
        logger.info("‚ö° Ex√©cution Grover hybride CORRECT")
        
        # Phase 1: Grover corrig√© pour la s√©lection rapide
        with time_operation_context("grover_correct_candidate_selection"):
            grover_results = correct_grover_retrieve_top_k(query_text, db_folder, k*3, n_qubits, cassandra_manager)
        
        if not grover_results:
            return []
        
        # Phase 2: Quantum overlap sur les candidats s√©lectionn√©s
        with time_operation_context("quantum_overlap_refinement"):
            # Pour l'instant, on retourne les r√©sultats Grover
            # TODO: Ajouter une √©tape de raffinement quantique
            return grover_results[:k]
    
    def _execute_hybrid_adaptive(self, query_text: str, db_folder: str, k: int, 
                               n_qubits: int, cassandra_manager) -> List[Tuple[float, str, str]]:
        """Ex√©cuter la strat√©gie hybride adaptative"""
        logger.info("üéØ Ex√©cution hybride adaptative CORRECTE")
        
        # Combiner les r√©sultats des deux syst√®mes
        with time_operation_context("parallel_search"):
            # Recherche classique
            classical_results = self._execute_classical_quantum(query_text, db_folder, k, n_qubits, cassandra_manager)
            
            # Recherche Grover corrig√©e
            grover_results = self._execute_grover_correct(query_text, db_folder, k, n_qubits, cassandra_manager)
        
        # Fusionner et d√©dupliquer les r√©sultats
        return self._merge_results(classical_results, grover_results, k)
    
    def _merge_results(self, classical_results: List[Tuple[float, str, str]], 
                      grover_results: List[Tuple[float, str, str]], k: int) -> List[Tuple[float, str, str]]:
        """
        Fusionner les r√©sultats des deux syst√®mes
        
        Args:
            classical_results: R√©sultats du syst√®me classique
            grover_results: R√©sultats de Grover corrig√©
            k: Nombre de r√©sultats finaux
            
        Returns:
            Liste fusionn√©e et d√©dupliqu√©e
        """
        # Cr√©er un dictionnaire pour d√©dupliquer
        merged = {}
        
        # Ajouter les r√©sultats classiques avec poids 1.0
        for score, path, chunk_id in classical_results:
            if chunk_id not in merged or merged[chunk_id][0] < score:
                merged[chunk_id] = (score, path, chunk_id)
        
        # Ajouter les r√©sultats Grover avec poids 0.9 (l√©g√®rement inf√©rieur pour √©quilibrer)
        for score, path, chunk_id in grover_results:
            weighted_score = score * 0.9
            if chunk_id not in merged or merged[chunk_id][0] < weighted_score:
                merged[chunk_id] = (weighted_score, path, chunk_id)
        
        # Trier et retourner les k meilleurs
        sorted_results = sorted(merged.values(), key=lambda x: x[0], reverse=True)
        return sorted_results[:k]
    
    def get_performance_stats(self) -> Dict[str, Any]:
        """Obtenir les statistiques de performance"""
        stats = {}
        
        for strategy, history in self.performance_history.items():
            if history:
                durations = [h['duration'] for h in history]
                result_counts = [h['results_count'] for h in history]
                
                stats[strategy] = {
                    'avg_duration': sum(durations) / len(durations),
                    'min_duration': min(durations),
                    'max_duration': max(durations),
                    'avg_results': sum(result_counts) / len(result_counts),
                    'total_queries': len(history)
                }
        
        return stats
    
    def optimize_strategy(self) -> SearchStrategy:
        """
        Optimiser la strat√©gie bas√©e sur l'historique de performance
        
        Returns:
            Strat√©gie optimale recommand√©e
        """
        stats = self.get_performance_stats()
        
        if not stats:
            return SearchStrategy.HYBRID_ADAPTIVE
        
        # Trouver la strat√©gie la plus rapide
        fastest_strategy = min(stats.keys(), 
                             key=lambda s: stats[s]['avg_duration'])
        
        logger.info(f"üéØ Strat√©gie optimale recommand√©e: {fastest_strategy}")
        return SearchStrategy(fastest_strategy)

# Interface de compatibilit√© pour l'API existante
def correct_hybrid_retrieve_top_k(query_text: str, db_folder: str, k: int = 5, 
                                 n_qubits: int = 8, cassandra_manager=None,
                                 strategy: str = "hybrid_adaptive") -> List[Tuple[float, str, str]]:
    """
    Interface de compatibilit√© CORRECTE pour l'API existante
    
    Args:
        query_text: Texte de la requ√™te
        db_folder: Dossier des circuits QASM
        k: Nombre de r√©sultats
        n_qubits: Nombre de qubits
        cassandra_manager: Gestionnaire Cassandra
        strategy: Strat√©gie √† utiliser
        
    Returns:
        Liste des r√©sultats (score, qasm_path, chunk_id)
    """
    try:
        search_strategy = SearchStrategy(strategy)
    except ValueError:
        logger.warning(f"Strat√©gie inconnue '{strategy}', utilisation de 'hybrid_adaptive'")
        search_strategy = SearchStrategy.HYBRID_ADAPTIVE
    
    hybrid_search = CorrectHybridQuantumSearch(strategy=search_strategy)
    return hybrid_search.search(query_text, db_folder, k, n_qubits, cassandra_manager)
