#!/usr/bin/env python3
"""
Script pour diagnostiquer et corriger le probl√®me de seuil de similarit√© dans Grover
"""

import requests
import json
import time

def diagnose_grover_threshold():
    """Diagnostiquer le probl√®me de seuil de similarit√©"""
    base_url = "http://localhost:8000"
    
    print("üîç DIAGNOSTIC DU SEUIL DE SIMILARIT√â GROVER")
    print("=" * 50)
    
    # Test avec diff√©rentes requ√™tes pour voir les similarit√©s
    test_queries = [
        "Antarctica is gaining ice due to climate change",
        "Climate change is causing global warming",
        "CO2 emissions are increasing",
        "Sea levels are rising"
    ]
    
    for i, query in enumerate(test_queries, 1):
        print(f"\nüìù Test {i}: '{query[:30]}...'")
        
        try:
            # Faire un fact-check pour voir les similarit√©s dans les logs
            start_time = time.time()
            response = requests.post(f"{base_url}/fact-check", 
                                   json={"message": query, "user_id": f"test_{i}", "language": "en"})
            duration = time.time() - start_time
            
            if response.status_code == 200:
                result = response.json()
                print(f"   ‚úÖ Verdict: {result.get('verdict', 'N/A')}")
                print(f"   ‚è±Ô∏è Dur√©e: {duration:.2f}s")
                print(f"   üìä Score: {result.get('certainty_score', 0):.3f}")
            else:
                print(f"   ‚ùå Erreur: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå Exception: {e}")
    
    return True

def test_grover_with_different_thresholds():
    """Tester Grover avec diff√©rents seuils"""
    base_url = "http://localhost:8000"
    
    print("\nüéØ TEST DE GROVER AVEC DIFF√âRENTS SEUILS")
    print("=" * 50)
    
    thresholds = [0.3, 0.4, 0.5, 0.6, 0.7]
    test_query = "Antarctica is gaining ice due to climate change"
    
    for threshold in thresholds:
        print(f"\nüìä Test avec seuil {threshold}:")
        
        try:
            # Configurer le seuil
            config_response = requests.post(f"{base_url}/configure-grover", 
                                          json={"threshold": threshold})
            
            if config_response.status_code == 200:
                print(f"   ‚úÖ Seuil configur√©: {threshold}")
                
                # Tester Grover
                start_time = time.time()
                test_response = requests.get(f"{base_url}/grover-test")
                duration = time.time() - start_time
                
                if test_response.status_code == 200:
                    result = test_response.json()
                    grover_result = result['results'].get('grover_correct', {})
                    
                    print(f"   üîç Grover r√©sultats: {grover_result.get('results_count', 0)}")
                    print(f"   ‚è±Ô∏è Dur√©e: {grover_result.get('duration', 0):.2f}s")
                    print(f"   ‚úÖ Succ√®s: {grover_result.get('success', False)}")
                    
                    if grover_result.get('results_count', 0) > 0:
                        print(f"   üéâ SEUIL OPTIMAL TROUV√â: {threshold}")
                        return threshold
                else:
                    print(f"   ‚ùå Erreur test: {test_response.status_code}")
            else:
                print(f"   ‚ùå Erreur config: {config_response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå Exception: {e}")
    
    return None

def optimize_grover_configuration():
    """Optimiser la configuration Grover"""
    base_url = "http://localhost:8000"
    
    print("\n‚öôÔ∏è OPTIMISATION DE LA CONFIGURATION GROVER")
    print("=" * 50)
    
    # Trouver le seuil optimal
    optimal_threshold = test_grover_with_different_thresholds()
    
    if optimal_threshold:
        print(f"\nüéØ Configuration optimale trouv√©e:")
        print(f"   Seuil de similarit√©: {optimal_threshold}")
        
        # Appliquer la configuration optimale
        try:
            config_response = requests.post(f"{base_url}/configure-grover", 
                                          json={
                                              "enabled": True,
                                              "strategy": "grover_correct",
                                              "threshold": optimal_threshold
                                          })
            
            if config_response.status_code == 200:
                print(f"   ‚úÖ Configuration appliqu√©e avec succ√®s")
                
                # V√©rifier la configuration
                stats_response = requests.get(f"{base_url}/grover-stats")
                if stats_response.status_code == 200:
                    stats = stats_response.json()
                    print(f"   üìä Configuration actuelle:")
                    print(f"      - Grover activ√©: {stats['config']['enabled']}")
                    print(f"      - Strat√©gie: {stats['config']['strategy']}")
                    print(f"      - Seuil: {stats['config']['threshold']}")
                
                return optimal_threshold
            else:
                print(f"   ‚ùå Erreur application config: {config_response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå Exception: {e}")
    else:
        print(f"\n‚ö†Ô∏è Aucun seuil optimal trouv√©")
        print(f"   Recommandation: Utiliser le syst√®me classique")
        
        # Configurer le fallback
        try:
            config_response = requests.post(f"{base_url}/configure-grover", 
                                          json={
                                              "enabled": False,
                                              "strategy": "classical_quantum"
                                          })
            
            if config_response.status_code == 200:
                print(f"   ‚úÖ Fallback configur√©: syst√®me classique")
                
        except Exception as e:
            print(f"   ‚ùå Exception: {e}")
    
    return None

def main():
    """Fonction principale"""
    print("üöÄ DIAGNOSTIC ET OPTIMISATION GROVER")
    print("=" * 60)
    
    # √âtape 1: Diagnostic
    diagnose_grover_threshold()
    
    # √âtape 2: Test des seuils
    optimal_threshold = test_grover_with_different_thresholds()
    
    # √âtape 3: Optimisation
    final_threshold = optimize_grover_configuration()
    
    print("\n" + "=" * 60)
    print("üéâ DIAGNOSTIC TERMIN√â")
    print("=" * 60)
    
    if final_threshold:
        print(f"‚úÖ Seuil optimal configur√©: {final_threshold}")
        print(f"üöÄ Grover est maintenant optimis√© et fonctionnel")
    else:
        print(f"‚ö†Ô∏è Grover n√©cessite des ajustements suppl√©mentaires")
        print(f"üîÑ Le syst√®me utilise le fallback classique")
    
    print(f"\nüìã Prochaines √©tapes:")
    print(f"1. Tester avec: curl -X POST http://localhost:8000/fact-check ...")
    print(f"2. V√©rifier les stats: curl http://localhost:8000/grover-stats")
    print(f"3. Monitorer les performances dans les logs")

if __name__ == "__main__":
    main()
